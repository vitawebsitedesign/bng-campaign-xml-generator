(function() {
	init();

	function init() {
		bindButtonHandlers();
		if (!tryLoadXmlFromUrlToken()) {
			showCampaigns();
			bindTooltips();
		}
	}

  function tryLoadXmlFromUrlToken() {
    const token = XmlTokenAdapter.getUrlParam('token');
    if (token) {
      const xml = XmlTokenAdapter.shareableTokenToXml(token);
      loadCampaignFromXml(xml);
      return true;
    }
    return false;
  }
  
  function showCampaigns() {
    const campaigns = CampaignList.get();
    $('.loading-campaign-templates-from-cloud').remove();

    campaigns.forEach((c, campaignNum) => {
      const clone = $('#templates .btn-open-campaign').clone();
      const host = getHostFromUrl(c.url);
      const fadeIn = `fadeIn ${campaignNum * 0.25}s ease-out forwards`;
      clone.text(c.name).attr('data-url', c.url);
      clone.attr('title', `Template will be loaded from ${host}`);
      clone.css('animation', fadeIn);
      clone.appendTo('.open-campaign-container');
    });

    $('.open-campaign-container .btn-open-campaign').on('click', loadCampaign);
  }
  
  function loadCampaign() {
		const dataUrl = $(this).attr('data-url');
		$('.btn-open-campaign').attr('disabled', 'disabled');
		$(this).text('fetching...');
    $.get(dataUrl)
      .done(loadCampaignFromXml)
      .fail(console.error);
  }
  
  function loadCampaignFromXml(xml) {
    $('#campaign-xml').val(xml);
    removeAllTooltips();
    getLoadScreenTransitionPromise().then(switchToEditorMode, console.error);
  }
  
  function getLoadScreenTransitionPromise() {
    return new Promise(function(resolve, reject) {
      const loadScreen = $('.popup-load');
      if (!loadScreen) {
        reject('Couldnt find load screen element');
      }
      
      $('.xml-container').css('animation', 'resetoffset 2s ease-out forwards');
      loadScreen.on('transitionend', event => {
        if (event.originalEvent.propertyName === 'opacity') {
					loadScreen.remove();
          resolve();
        }
      });

      loadScreen.css('opacity', 0);
    });
  }
  
  function switchToEditorMode() {
    setCampaignXmlHeight();
		setHtmlFieldsForXml();
		rebindControlHandlers();
    $('.campaign-container .btn-hide-options').click();
  }

  function share() {
    const xml = $('#campaign-xml').val();
    const shareUrl = XmlTokenAdapter.getShareUrl(xml);
    $('.share-token').val(shareUrl);
  }

  function setHtmlFieldsForXml() {
    const xmlStr = $('#campaign-xml').val();
    const xml = BngCampaignXmlParser.convertBngCampaignXmlToXmlDoc(xmlStr);
    const mappingsUrl = 'https://gist.githubusercontent.com/vitawebsitedesign/8609996e29eec136b7658dd37f8448c2/raw/xml-html-mapping-metadata.json';
    $.get(mappingsUrl).done(mappingsStr => {
        const mappings = JSON.parse(mappingsStr);
				BngCampaignXmlParser.setHtmlFieldsForXml(addGroup, addEvent, addLevel, mappings, xml);
				updateAutoGeneratedHtmlFields();
    });
  }

	function addGroup(collapseOthers, shouldGenerateXml = true) {
		const group = $('#templates .group').first().clone();
		const groupNum = $('.campaign-container .group').length;
		const groupLetter = String.fromCharCode(97 + groupNum).toUpperCase();
		group.find('.group-num').text(groupLetter);

		if (collapseOthers !== false) {
			$('.campaign-container .btn-hide-options').click();
		}

		$('.campaign-container .groups').append(group);
		rebindControlHandlers();

    if (shouldGenerateXml) {
      generateXml();
    }
	}
  
	function addLevel(shouldGenerateXml = true, addLevelBtnEle) {
		const level = $('#templates .level').first().clone();
    addLevelBtnEle = addLevelBtnEle || $(this);
		addLevelBtnEle.before(level);
		rebindControlHandlers();

    if (shouldGenerateXml) {
      generateXml();  
    }
	}
  
	function addEvent(shouldGenerateXml = true, groupEle) {
		const clone = $('#templates .event').first().clone();
		const newEventNum = $(this).closest('.group').find('.event').length + 1;
		const newEventName = `Event ${newEventNum}`;
		clone.find('.event-name').val(newEventName);

    groupEle = groupEle || $(this).closest('.group');
		groupEle.find('.events').append(clone);
		rebindControlHandlers();

    if (shouldGenerateXml) {
      generateXml(); 
    }
	}

	function removeLevel() {
		$(this).closest('.level').remove();
		generateXml();
	}
  
  function updateAutoGeneratedHtmlFields() {
    const campaignName = $('#campaign-name').val();
    const campaignNameSlugified = StringUtil.slugify(campaignName);
		setCampaignFilename(campaignNameSlugified);
		setFallbackTextureFilename(campaignNameSlugified);
    updateEventTitles();
  }
  
  function getHostFromUrl(url) {
    var parser = document.createElement('a');
    parser.href = url;
    return parser.hostname;
  }
  
  function loadData() {
    for (let m = 0; m < mappings.length; m++) {
      const mapping = mappings[m];
      let val = mapping.html.val;
      
      if (val === undefined || val === null) {
        continue;
      }
      
      const field = $(mapping.html.selector);
      if (typeof val === 'boolean') {
        val = boolToSentenceCaseStr(val);
      }

      field.val(val);  
    }
    
    generateXml();
  }

  function boolToSentenceCaseStr(bool) {
    const str = bool.toString();
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  
	function bindButtonHandlers() {
		$('.btn-share').on('click', share);
		$('.btn-randomize-website-colour').on('click', () => StringUtil.randomizeWebsiteColour());
		$('#campaign-xml, .video, .fallback-texture, .share-token').on('click', selectAll);

    $('.load-raw-xml').on('paste', function(e) {
      const xml = e.originalEvent.clipboardData.getData('text');
      loadCampaignFromXml(xml);
    });
	}
  
  $('#share-modal').on('shown.bs.modal', function () {
    $('.share-token').click();
  });
  
	function toggleOpts() {
		$(this).closest('article').find('.toggleable-item').slideToggle('slow');
	}

	function toggleAllOpts() {
		const stateAttr = 'data-state';
		const stateStr = $(this).attr(stateAttr);
		const state = parseFloat(stateStr);
		const newState = 1 - state;
		$(this).attr(stateAttr, newState);

		const items = $(this).closest('article').find('.toggleable-item');
		const speed = 'slow';

		if (state) {
			items.slideUp(speed);
		} else {
			items.slideDown(speed);
		}
	}

	function rebindControlHandlers() {
    const campaignOptsContainer = '.campaign-container';

    $(`${campaignOptsContainer} select`).unbind('change');
		$(`${campaignOptsContainer} select`).on('change', generateXml);

		$(`${campaignOptsContainer} input`).unbind('keyup mouseup');
		$(`${campaignOptsContainer} input`).on('keyup mouseup', generateXml);

		$(`${campaignOptsContainer} .btn-rm-level`).unbind('click');
		$(`${campaignOptsContainer} .btn-rm-level`).on('click', removeLevel);

		$(`${campaignOptsContainer} .btn-toggle-options`).unbind('click');
		$(`${campaignOptsContainer} .btn-toggle-options`).on('click', toggleOpts);

		$(`${campaignOptsContainer} .btn-toggle-all-options`).unbind('click');
		$(`${campaignOptsContainer} .btn-toggle-all-options`).on('click', toggleAllOpts);

		$(`${campaignOptsContainer} .btn-hide-options`).unbind('click');
		$(`${campaignOptsContainer} .btn-hide-options`).on('click', toggleAllOpts);

		$(`${campaignOptsContainer} .btn-add-level, .btn-add-event, .btn-add-group`).unbind('click');
		$(`${campaignOptsContainer} .btn-add-level, .btn-add-event, .btn-add-group`).on('click', generateXml);

		$(`${campaignOptsContainer} .btn-add-level`).unbind('click');
		$(`${campaignOptsContainer} .btn-add-event`).unbind('click');
		$(`${campaignOptsContainer} .btn-add-group`).unbind('click');
		$(`${campaignOptsContainer} .btn-add-level`).on('click', addLevel);
		$(`${campaignOptsContainer} .btn-add-event`).on('click', addEvent);
		$(`${campaignOptsContainer} .btn-add-group`).on('click', addGroup);
    
    $(`${campaignOptsContainer} .game-mode`).unbind('change');
		$(`${campaignOptsContainer} .game-mode`).on('change', setDefaultGamemodeAwardValues);

		bindTooltips();
	}

	function bindTooltips() {
		$('[data-toggle="tooltip"]').tooltip();
	}

	function setCampaignFilename(slugifiedCampaignName) {
		const path = StringUtil.getCustomCampaignFilePath(slugifiedCampaignName);
		$('#campaign-xml-filename').val(path);
	}

	function setFallbackTextureFilename(slugifiedCampaignName) {
		const filename = `${slugifiedCampaignName}.jpg`;
		$('.fallback-texture').val(filename);
	}

	function updateEventTitles() {
		$('.campaign-container .event-name').each(function(i) {
			const title = $(this).val();
			$(this).closest('.event').find('.event-name-title').text(title);
		});
	}

	function generateXml() {
		updateAutoGeneratedHtmlFields(); 
		$('#campaign-xml').val(getXmlForCampaign());
	}

  function setDefaultGamemodeAwardValues() {
    const awardSelectors = [
      '.bronze-value',
      '.silver-value',
      '.gold-value',
      '.platinum-value',
    ];
    const awardMaps = mappings.filter(m => awardSelectors.indexOf(m.html.selector.toLowerCase()) !== -1);
    // get gamemode
    const gamemodeLower = $(this).val().toLowerCase();

    // for bronze, silver, gold, platinum
    awardSelectors.forEach(awardSelector => {
      // get award value for current gamemode
      const awardMapping = awardMaps.filter(m => m.html.selector.toLowerCase() === awardSelector)[0];
      const awardThreshold = awardMapping.html.val[gamemodeLower];
      // set field
      $(this).closest('.event').find(awardSelector).val(awardThreshold);
    });
  }

	function getXmlForEvents(groupEle) {
		var eventCollection = $(groupEle).find('.event');
		var events = [...eventCollection];
		return events.map(getXmlForEvent).toString().replace(/,/g, '');
	}

	function getXmlForCampaign() {
		const name = $('#campaign-name').val();
		const groups = getXmlForGroups();
		const barracudaAllowed = $('.barracuda-allowed').val();
		const video = $('.video').val();
		const fallbackTexture = $('.fallback-texture').val();
	return `<Settings Name="${name}" BarracudaAllowed="${barracudaAllowed}" Video="${video}" FallbackTexture="${fallbackTexture}" />
	${groups}
		`;
	}

	function getXmlForGroups() {
		const groups = [...$('.campaign-container .group')];
		return groups.map(groupEle => {
			const pointsToUnlock = $(groupEle).find('.points-to-unlock').val();
			const xmlForEvents = getXmlForEvents(groupEle);
			return `
<Group PointsToUnlock="${pointsToUnlock}">
${xmlForEvents}
</Group>
			`;
		});
	}

	function getXmlForEvent(eventEle) {
		const name = $(eventEle).find('.event-name').val();
		const gamemode = $(eventEle).find('.game-mode').val();
		const xmlLevels = getLevelXmlForEvent(eventEle);
		const xmlEventModifiers = getEventModifiersXml(eventEle);
		const speedClass = $(eventEle).find('.speed-class').val();
		const modernPhysics = $(eventEle).find('.modern-physics').val();
		const bronzeValue = $(eventEle).find('.bronze-value').val();
		const silverValue = $(eventEle).find('.silver-value').val();
		const goldValue = $(eventEle).find('.gold-value').val();
		const platinumValue = $(eventEle).find('.platinum-value').val();
		const easyScore = $(eventEle).find('.easy-score').val();
		const hardScore = $(eventEle).find('.hard-score').val();

		return `
	<Event>
		<Frontend Name="${name}" />
		<Awards BronzeValue="${bronzeValue}" SilverValue="${silverValue}" GoldValue="${goldValue}" PlatinumValue="${platinumValue}" EasyScore="${easyScore}" HardScore="${hardScore}" />
		<EventSettings>
			<Mode Gamemode="${gamemode}" ModernPhysics="${modernPhysics}" SpeedClass="${speedClass}">
				<Levels>
					${xmlLevels}
				</Levels>
			</Mode>
			${xmlEventModifiers}
		</EventSettings>
	</Event>
		`;
	}

	function getLevelXmlForEvent(eventEle) {
		const trackCollection = $(eventEle).find('.track');
		const trackEles = [...trackCollection];
		return trackEles.map(getXmlForLevel).reduce((acc, cur) => acc + cur, '');
	}

	function getEventModifiersXml(eventEle) {
		const forcePlayerShip = $(eventEle).find('.force-player-ship').val();
		const forceAiShip = $(eventEle).find('.force-ai-ship').val();
		const forcedShip = $(eventEle).find('.player-ship').first().val();
		const weapons = $(eventEle).find('.weapons').first().val();
		const numAi = $(eventEle).find('.number-of-ai').val();
		const hardcore = $(eventEle).find('.hardcore').val();
		const mirror = $(eventEle).find('.mirror').val();
		const extraLaps = $(eventEle).find('.extra-laps').val();
		const difficulty = $(eventEle).find('.difficulty').val();
		const useSpeedMult = $(eventEle).find('.use-speed-mult').val();
		const speedMult = $(eventEle).find('.speed-mult').val();

		return `<Modifiers Weapons="${weapons}" ForcePlayerShip="${forcePlayerShip}" ForceAiShip="${forceAiShip}" ForcedShip="${forcedShip}" Hardcore="${hardcore}" Mirror="${mirror}" ExtraLaps="${extraLaps}" />
		<Ai Difficulty="${difficulty}" Count="${numAi}" UseSpeedMult="${useSpeedMult}" SpeedMult="${speedMult}" />`;
	}

	function getXmlForLevel(trackEle) {
		return `<Level Name="${trackEle.value}" />`;
	}

	function selectAll() {
		$(this).select();
	}

  function setCampaignXmlHeight() {
    const paddingBottom = parseFloat($('body').css('padding-bottom'));
    const height = $('iframe').height() - $('header').height() - paddingBottom;
    const heightPx = `${height}px`;
    $('#campaign-xml').css('height', heightPx);
  }
  
  function removeAllTooltips() {
    $('.tooltip').remove();
  }
})();
